# Generated by Django 5.0.6 on 2025-04-14 04:06

import accounts.helpers.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CalculatorAccessRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('walls', models.BooleanField(default=False)),
                ('windows', models.BooleanField(default=False)),
                ('roof', models.BooleanField(default=False)),
                ('occupants', models.BooleanField(default=False)),
                ('equipments', models.BooleanField(default=False)),
                ('role_name', models.CharField(blank=True, max_length=30, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Calculator Access Roles',
                'ordering': ['role_name'],
                'unique_together': {('walls', 'windows', 'roof', 'occupants', 'equipments')},
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator, accounts.helpers.validators.validate_email])),
                ('phone_number', models.CharField(max_length=10, unique=True, validators=[accounts.helpers.validators.validate_phone_number])),
                ('first_name', models.CharField(max_length=150, validators=[accounts.helpers.validators.validate_first_name])),
                ('last_name', models.CharField(blank=True, max_length=150, validators=[accounts.helpers.validators.validate_last_name])),
                ('verified', models.BooleanField(default=False)),
                ('email_otp', models.CharField(blank=True, max_length=6, null=True)),
                ('forgot_password_otp', models.CharField(blank=True, max_length=6, null=True)),
                ('password_update_token', models.CharField(blank=True, max_length=100, null=True)),
                ('otp_timestamp', models.DateTimeField(auto_now_add=True)),
                ('forgot_otp_timestamp', models.DateTimeField(blank=True, null=True)),
                ('is_restricted', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('calc_access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.calculatoraccessrole')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
